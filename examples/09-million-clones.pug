include header.pug
  h1 Millions of Clones
  p Clones the users mask repeatedly onto the scene

  #scene-wrap
    canvas#scene-background
    canvas#scene-person

style.
  #scene-wrap {
    overflow: hidden;
    position: relative;
    width: 100%;
    height: 600px;
  }

  #scene-wrap canvas {
    transform: scale(-1, 1);
    position: absolute;
    top: 0;
    left: 0;
  }

  #scene-person {display: none}

script.
  // Settings
  const cloneConfig = {
    horiz: 10,
    vert: 12,
    scale: 100
  }

  const handsfree = new Handsfree({
    models: {
      head: {enabled: false},
      bodypix: {enabled: true}
    }
  })
  Handsfree.disable('head.pointer')
  Handsfree.disable('head.vertScroll')

  const $wrap = document.querySelector('#scene-wrap')
  const $scene = document.querySelector('#scene-person')

  /**
   * Create a plugin that clones the users mask repeatedly onto the canvas
   */
  Handsfree.use('bodypix.weirdCuts', {
    $canvases: [],
    
    // Create clone canvases
    onUse () {
      const widthHeightRatio = handsfree.debugger.video.width / handsfree.debugger.video.height
      $scene.width = handsfree.debugger.video.width
      $scene.height = handsfree.debugger.video.height
      
      for (let y = 0; y < cloneConfig.vert + 1; y++) {
        const cloneWidth = 25 * (y + 1) + cloneConfig.scale
        const cloneHeight = 25 * (y + 1) * widthHeightRatio + cloneConfig.scale
        const isOdd = y % 2

        for (let x = 0; x < cloneConfig.horiz - y + 5; x++) {
          const $canvas = document.createElement('canvas')
          
          $canvas.width = handsfree.debugger.video.width
          $canvas.height = handsfree.debugger.video.height
          $canvas.style.width = `${cloneWidth}px`
          $canvas.style.height = `${cloneHeight}px`

          // I don't know what I'm doing here ðŸ˜…
          $canvas.style.left = `${x * cloneWidth + isOdd * cloneWidth / 2 - cloneWidth / 2 - cloneConfig.scale * 1.5}px`
          $canvas.style.top = `${y * cloneHeight / 15 - cloneConfig.scale * 2}px`

          $wrap.appendChild($canvas)

          this.$canvases.push($canvas)
        }
      }
    },

    /**
     * Called once per frame
     * - Paints the video onto the background
     * - Extracts the user and places them on top canvas
     */
    onFrame ({body, model}) {
      if (!body.data) return

      // Create a mask
      model.bodypix.sdk.drawMask(
        $scene,
        handsfree.debugger.video,
        model.bodypix.sdk.toMask(body.data, {r: 0, g: 0, b: 0, a: 0}, {r: 255, g: 0, b: 255, a: 255}),
        1,
        0,
        0
      )

      // Remove black pixels
      let sceneCtx = $scene.getContext('2d')
      let imageData = sceneCtx.getImageData(0, 0, $scene.width, $scene.height)

      for (let i = 0; i < imageData.data.length; i += 4) {
        if (imageData.data[i] === 255 && imageData.data[i + 1] === 0 && imageData.data[i + 2] === 255) {
          imageData.data[i + 3] = 0
        }
      }

      this.$canvases.forEach($canvas => {
        $canvas.getContext('2d').putImageData(imageData, 0, 0)
      })
    }
  })