include header.pug
  h1 Rainbow Trip
  p Clones the users mask repeatedly, scaling and colorizing over time in a psychedelic manner

  #scene-wrap
    canvas#scene-background
    canvas#scene-person

style.
  #scene-wrap canvas {
    transform: scale(-1, 1);
    position: absolute;
    top: 0;
    left: 0;
  }

  #scene-person {z-index: 9999}

  #scene-wrap, #scene-background {position: relative}

  #scene-wrap {
    overflow: hidden;
    width: 640px;
    height: 480px;
  }

script.
  const handsfree = new Handsfree({
    models: {
      head: {enabled: false},
      bodypix: {enabled: true}
    }
  })
  Handsfree.disable('head.pointer')
  Handsfree.disable('head.vertScroll')

  const $wrap = document.querySelector('#scene-wrap')
  const $background = document.querySelector('#scene-background')
  const $scene = document.querySelector('#scene-person')

  /**
   * Create a plugin that clones the users mask repeatedly onto the canvas
   */
  Handsfree.use('bodypix.weirdCuts', {
    // Contains all of our canvases
    canvases: [],

    // Possible colors
    // @TODO let's pick a nicer palette
    colors: [[254, 201, 7], [252, 161, 24], [245, 124, 33], [252, 81, 25], [244, 27, 44], [214, 9, 133], [169, 33, 133], [132, 42, 130], [88, 46, 130], [50, 46, 130]],
    currentColorIndex: 0,
    
    // Setup main canvas
    onUse () {
      $background.width = $scene.width = handsfree.debugger.video.width
      $background.height = $scene.height = handsfree.debugger.video.height
    },

    /**
     * Called once per frame
     * - Paints the video onto the background
     * - Extracts the user and places them on top canvas
     */
    onFrame ({body, model}) {
      if (!body.data) return

      // Copy the user onto the topmost canvas and copy a colorized mask
      this.captureUser({body, model})

      // Scale the canvases
      this.scaleCanvases()
    },

    /**
     * Scales the canvases
     */
    scaleCanvases () {
      this.canvases.forEach($canvas => {
        $canvas.scaleWidth += 100
        $canvas.scaleHeight += 100

        $canvas.style.width = `${$canvas.scaleWidth}px`
        $canvas.style.height = `${$canvas.scaleHeight}px`
        $canvas.style.left = `${($canvas.scaleWidth - 640) / -2}px`
        $canvas.style.top = `${($canvas.scaleHeight - 480) / -2}px`
      })
    },

    /**
     * Create a new canvas element and copy just the mask onto it
     */
    captureUser ({body, model}) {
      // Create a mask
      model.bodypix.sdk.drawMask(
        $scene,
        handsfree.debugger.video,
        model.bodypix.sdk.toMask(body.data, {r: 0, g: 0, b: 0, a: 0}, {r: 255, g: 0, b: 255, a: 255}),
        1,
        0,
        0
      )

      // Remove black pixels
      let sceneCtx = $scene.getContext('2d')
      let imageData = sceneCtx.getImageData(0, 0, $scene.width, $scene.height)

      for (let i = 0; i < imageData.data.length; i += 4) {
        if (imageData.data[i] === 255 && imageData.data[i + 1] === 0 && imageData.data[i + 2] === 255) {
          imageData.data[i + 3] = 0
        }
      }

      // Place the users real pixels above all others
      sceneCtx.putImageData(imageData, 0, 0)
      this.weirdCut(body)
    },

    /**
     * Capture the user and place them onto a new canvas
     */
    weirdCut: Handsfree.throttle (function (body) {
      let sceneCtx = $scene.getContext('2d')
      let imageData = sceneCtx.getImageData(0, 0, $scene.width, $scene.height)

      // Colorize the mask
      for (let i = 0; i < imageData.data.length; i += 4) {
        if (imageData.data[i + 3] !== 0) {
          const color = this.colors[this.currentColorIndex]
          
          imageData.data[i] = color[0]
          imageData.data[i + 1] = color[1]
          imageData.data[i + 2] = color[2]
        }
      }

      // Create the new canvas with the mask
      const $canvas = document.createElement('canvas')
      $canvas.scaleWidth = $canvas.width = handsfree.debugger.video.width
      $canvas.scaleHeight = $canvas.height = handsfree.debugger.video.height
      $wrap.appendChild($canvas)

      $canvas.getContext('2d').putImageData(imageData, 0, 0)
      this.canvases.push($canvas)

      // Set canvas offset
      this.currentColorIndex++
      if (this.currentColorIndex > this.colors.length - 1) {
        this.currentColorIndex = 0
      }

      // Delete the canvas
      setTimeout(() => {
        $canvas.remove()
        this.canvases.unshift()
      }, 25000)
    }, 250)
  })